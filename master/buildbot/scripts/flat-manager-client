#!/usr/bin/python3

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import requests
import gzip
import base64
import binascii
import json
import logging
import os
import os
import sys
import traceback
from urllib.parse import urlparse
from urllib.parse import urljoin
import errno
import time

from argparse import ArgumentParser
from functools import reduce

import gi
gi.require_version('OSTree', '1.0')
from gi.repository import GLib, Gio, OSTree

UPLOAD_CHUNK_LIMIT = 4 * 1024 * 1024
DEFAULT_LIMIT = 2 ** 16

class ApiError(Exception):
    def __init__(self, response, body):
        self.response = response
        self.body = body
    def __str__(self):
        return "API call %s returned status %s: %s: %s" % (self.response.url, self.response.status_code, self.response.reason, self.body)

# This is similar to the regular payload, but opens the file lazily
class NamedFilePart:
    def __init__(self, filename, objectname):
        self.filename = filename
        self.objectname = objectname
        self._size = None

    def size(self):
        if self._size is None:
            self._size = os.stat(self.filename).st_size
        return self._size

    def add_to_dict(self, file_dict):
        with open(self.filename, 'rb') as content_file:
            content = content_file.read()
            file_dict[self.objectname] = (self.objectname, content, 'application/octet-stream')

def ostree_object_path(repo, obj):
    repodir = repo.get_path().get_path()
    return os.path.join(repodir, 'objects', obj[0:2], obj[2:])

def ostree_get_dir_files(repo, objects, dirtree):
    if dirtree.endswith(".dirtree"):
        dirtree = dirtree[:-8]
    dirtreev = repo.load_variant(OSTree.ObjectType.DIR_TREE, dirtree)[1]
    iter = OSTree.RepoCommitTraverseIter()
    iter.init_dirtree(repo, dirtreev, 0)
    while True:
        type = iter.next()
        if type == OSTree.RepoCommitIterResult.END:
            break
        if type == OSTree.RepoCommitIterResult.ERROR:
            break
        if type == OSTree.RepoCommitIterResult.FILE:
            d = iter.get_file()
            objects.add(d.out_checksum + ".filez")
        if type == OSTree.RepoCommitIterResult.DIR:
            pass

def local_needed_files(repo, metadata_objects):
    objects = set()
    for c in metadata_objects:
        if c.endswith(".dirtree"):
            ostree_get_dir_files(repo, objects, c)
    return objects

def local_needed_metadata_dirtree(repo, objects, dirtree_content, dirtree_meta):
    objects.add(dirtree_meta + ".dirmeta")
    dirtree_content_name = dirtree_content + ".dirtree"
    if dirtree_content_name in objects:
        return
    objects.add(dirtree_content_name)

    dirtreev = repo.load_variant(OSTree.ObjectType.DIR_TREE, dirtree_content)[1]
    iter = OSTree.RepoCommitTraverseIter()
    iter.init_dirtree(repo, dirtreev, 0)
    while True:
        type = iter.next()
        if type == OSTree.RepoCommitIterResult.END:
            break
        if type == OSTree.RepoCommitIterResult.ERROR:
            break
        if type == OSTree.RepoCommitIterResult.FILE:
            pass
        if type == OSTree.RepoCommitIterResult.DIR:
            d = iter.get_dir()
            local_needed_metadata_dirtree(repo, objects, d.out_content_checksum, d.out_meta_checksum)

def local_needed_metadata(repo, commits):
    objects = set()
    for rev in commits:
        objects.add(rev + ".commit")
        commitv = repo.load_variant(OSTree.ObjectType.COMMIT, rev)[1]
        iter = OSTree.RepoCommitTraverseIter()
        iter.init_commit(repo, commitv, 0)
        while True:
            type = iter.next()
            if type == OSTree.RepoCommitIterResult.END:
                break
            if type == OSTree.RepoCommitIterResult.ERROR:
                break
            if type == OSTree.RepoCommitIterResult.FILE:
                pass
            if type == OSTree.RepoCommitIterResult.DIR:
                d = iter.get_dir()
                local_needed_metadata_dirtree(repo, objects, d.out_content_checksum, d.out_meta_checksum)
    return objects


def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]

def missing_objects(build_url, token, wanted):
    missing=[]
    for chunk in chunks(wanted, 2000):
        wanted_json=json.dumps({'wanted': chunk}).encode('utf-8')
        data=gzip.compress(wanted_json)
        headers = {
            'Authorization': 'Bearer ' + token,
            'Content-Encoding': 'gzip',
            'Content-Type': 'application/json'
        }
        session = requests.Session()
        resp = session.get(build_url + "/missing_objects", data=data, headers=headers)
        if resp.status_code != 200:
            raise ApiError(resp, resp.json())
        data = resp.json()
        missing.extend(data["missing"])
    return missing

def upload_files(build_url, token, files):
    if len(files) == 0:
        return
    print("Uploading %d objects (%d bytes)" % (len(files), reduce(lambda x, y: x + y, map(lambda f: f.size(), files))))
    file_dict = {}
    for f in files:
        f.add_to_dict(file_dict)
    session = requests.Session()
    resp = session.request("post", build_url + '/upload', files=file_dict, headers={'Authorization': 'Bearer ' + token})
    if resp.status_code != 200:
        raise ApiError(resp, resp.json())

def upload_deltafile(build_url, token, f):
    file_dict = {}
    f.add_to_dict(file_dict)
    session = requests.Session()
    resp = session.request("post", build_url + '/upload', files=file_dict, headers={'Authorization': 'Bearer ' + token})
    if resp.status_code != 200:
        raise ApiError(resp, resp.json())

def upload_objects(repo_path, build_url, token, objects):
    req = []
    total_size = 0
    for file_obj in objects:
        named = get_object_multipart(repo_path, file_obj)
        file_size = named.size()
        if total_size + file_size > UPLOAD_CHUNK_LIMIT: # The new object would bring us over the chunk limit
            if len(req) > 0: # We already have some objects, upload those first
                next_req = [named]
                total_size = file_size
            else:
                next_req  =  []
                req.append(named)
                total_size = 0
            upload_files(build_url, token, req)
            req = next_req
        else:
            total_size = total_size + file_size
            req.append(named);

    # Upload any remainder
    upload_files(build_url, token, req)

def create_ref(build_url, token, ref, commit):
    print("Creating ref %s with commit %s" % (ref, commit))
    session = requests.Session()
    resp = session.post(build_url + "/build_ref", headers={'Authorization': 'Bearer ' + token}, json= { "ref": ref, "commit": commit} )
    if resp.status_code != 200:
        raise ApiError(resp, resp.json())
    data = resp.json()
    return data;

def add_extra_ids(build_url, token, extra_ids):
    print("Adding extra ids %s" % (extra_ids))
    session = requests.Session()
    resp = session.post(build_url + "/add_extra_ids", headers={'Authorization': 'Bearer ' + token}, json= { "ids": extra_ids} )
    if resp.status_code != 200:
        raise ApiError(resp, resp.json())
    data = resp.json()
    return data;

def get_build(build_url, token):
    session = requests.Session()
    resp = session.get(build_url, headers={'Authorization': 'Bearer ' + token})
    if resp.status_code != 200:
        raise ApiError(resp, resp.json())
    data = resp.json()
    return data

def wait_for_job(job_url, token):
    old_job_status  = 0
    printed_len = 0
    iterations_since_change=0
    while True:
        try:
            session = requests.Session()
            resp = session.get(job_url,
                               headers={'Authorization': 'Bearer ' + token},
                               json={'log-offset': printed_len})
            if resp.status_code != 200:
                raise ApiError(resp, resp.json())
            job = resp.json()
            job_status = job['status']
            if job_status > 0 and old_job_status == 0:
                print("/ Job was started");
            old_job_status = job_status
            log = job['log']
            if len(log) > 0:
                iterations_since_change=0
                for line in log.splitlines(True):
                    print("| %s" % line, end="")
                printed_len = printed_len + len(log)
            else:
                iterations_since_change=iterations_since_change+1
            if job_status > 1:
                if job_status == 2:
                    print("\ Job completed successfully")
                else:
                    print("\ Job failed")
                return job
        except requests.exceptions.ConnectionError as e:
            # Client disconnected, retry
            # Not sure exactly why, but i got a lot of ConnectionResetErrors here
            # in tests. I guess the server stops reusing a http2 session after a bit
            # Should be fine to retry with the backof
            pass
        # Some polling backoff to avoid loading the server
        if iterations_since_change <= 1:
            sleep_time=1
        elif iterations_since_change < 5:
            sleep_time=3
        elif iterations_since_change < 15:
            sleep_time=5
        elif iterations_since_change < 30:
            sleep_time=10
        else:
            sleep_time=60
        time.sleep(sleep_time)

def commit_build(build_url, wait, token):
    print("Commiting build %s" % (build_url))
    session = requests.Session()
    resp = session.post(build_url + "/commit", headers={'Authorization': 'Bearer ' + token}, json= {} )
    if resp.status_code != 200:
        raise ApiError(resp, resp.json())
    job = resp.json()
    job_url = resp.headers['location'];
    print("job: %s" % job)
    if wait:
        print("Waiting for commit job")
        job = wait_for_job (job_url, token);
    return job

def publish_build(build_url, wait, token):
    print("Publishing build %s" % (build_url))
    session = requests.Session()
    resp = session.post(build_url + "/publish", headers={'Authorization': 'Bearer ' + token}, json= { } )
    if resp.status_code != 200:
        print ("resp.json(): ", resp.json())
        raise ApiError(resp, resp.json())
    job = resp.json()
    job_url = resp.headers['location'];
    if wait:
        print("Waiting for publish job")
        job = wait_for_job (job_url, token);
    return job;

def purge_build(build_url, token):
    print("Purging build %s" % (build_url))
    session = requests.Session()
    resp = session.post(build_url + "/purge", headers={'Authorization': 'Bearer ' + token}, json= {} )
    if resp.status_code != 200:
        raise ApiError(resp, resp.json())
    return resp.json()

def create_token(manager_url, token, name, subject, scope, duration):
    token_url = urljoin(manager_url, "/api/v1/token_subset")
    session = requests.Session()
    resp = session.post(token_url, headers={'Authorization': 'Bearer ' + token}, json = {
        "name": name,
        "sub": subject,
        "scope": scope,
        "duration": duration,
    } )
    if resp.status_code != 200:
        raise ApiError(resp, resp.json())
    data = resp.json()
    return data["token"]

def get_object_multipart(repo_path, object):
    return NamedFilePart(repo_path + "/objects/" + object[:2] + "/" + object[2:], object)

def create_command(args):
    build_url = urljoin(args.manager_url, "/api/v1/build")
    session = requests.Session()
    resp = session.post(build_url, headers={'Authorization': 'Bearer ' + args.token}, json={
        "repo": args.repo
    } )
    if resp.status_code != 200:
        raise ApiError(resp, resp.json())
    data = resp.json()
    print(resp.headers['location'])
    return 0

def delta_name_part_encode(commit):
    return base64.b64encode(binascii.unhexlify(commit), b"+_")[:-1].decode("utf-8")

def delta_name_encode (delta):
    return "-".join(map(delta_name_part_encode, delta.split("-")))

def push_command(args):
    local_repo = OSTree.Repo.new(Gio.File.new_for_path(args.repo_path))
    try:
        local_repo.open(None)
    except GLib.Error as err:
        print("Can't open repo %s: %s" % (args.repo_path, err.message))
        return 1

    refs = {}
    if len(args.branches) == 0:
        _, all_refs = local_repo.list_refs(None, None)
        for ref in all_refs:
            if ref.startswith("app/") or ref.startswith("runtime/") or ref.startswith("screenshots/"):
                refs[ref] = all_refs[ref]
    else:
        for branch in args.branches:
            _, rev = local_repo.resolve_rev(branch, False)
            refs[branch] = rev

    if (args.minimal_token):
        id = os.path.basename(urlparse(args.build_url).path)
        token = create_token(args.build_url, args.token, "minimal-upload", "build/%s" % (id), ["upload"], 60*60)
    else:
        token = args.token

    print("Uploading refs to %s: %s"% (args.build_url, list(refs)))

    metadata_objects = local_needed_metadata(local_repo, refs.values())

    print("Refs contain %d metadata objects" % (len(metadata_objects)))

    missing_metadata_objects = missing_objects(args.build_url, token, list(metadata_objects))

    print("Remote missing %d of those" % (len(missing_metadata_objects)))

    file_objects = local_needed_files(local_repo, missing_metadata_objects)
    print("Has %d file objects for those" % (len(file_objects)))

    missing_file_objects = missing_objects(args.build_url, token, list(file_objects))
    print("Remote missing %d of those" % (len(missing_file_objects)))

    # First upload all missing file objects
    print("Uploading file objects")
    upload_objects(args.repo_path, args.build_url, token, missing_file_objects)

    # Then all the metadata
    print("Uploading metadata objects")
    upload_objects(args.repo_path, args.build_url, token, missing_metadata_objects)

    _, deltas = local_repo.list_static_delta_names ()
    print("deltas: " + str(deltas))
    if len(deltas) > 0:
        print("Uploading deltas")

        for ref, commit in refs.items():
            # Skip screenshots here
            if ref.startswith("app/") or ref.startswith("runtime/"):
                for delta in deltas:
                    if delta == commit or delta.endswith("-" + commit):
                        print(" %s: %s" % (ref, delta))
                        delta_name = delta_name_encode (delta)
                        delta_dir = args.repo_path + "/deltas/" + delta_name[:2] + "/" + delta_name[2:]
                        parts = os.listdir(delta_dir)
                        for part in parts:
                            f = NamedFilePart(delta_dir + "/" + part, delta_name + "." + part + ".delta")
                            upload_deltafile(args.build_url, token, f)

    # Then the refs
    for ref, commit in refs.items():
        create_ref(args.build_url, token, ref, commit)

    # Then any extra ids
    if args.extra_id:
        add_extra_ids(args.build_url, token, args.extra_id)

    # Note, this always uses the full token, as the minimal one only has upload permissions
    if args.commit or args.publish:
        commit_build(args.build_url, args.publish or args.wait, args.token)

    if args.publish:
        publish_build(args.build_url, args.wait, args.token)

def commit_command(args):
    commit_build(args.build_url, args.wait, args.token)
    return 0

def publish_command(args):
    publish_build(args.build_url, args.wait, args.token)
    return 0

def purge_command(args):
    purge_build(args.build_url, args.token)
    return 0

def create_token_command(args):
    new_token = create_token(args.manager_url, args.token, args.name, args.subject, args.scope, args.duration)
    print(new_token)
    return 0

if __name__ == '__main__':
    progname = os.path.basename(sys.argv[0])

    parser = ArgumentParser(prog=progname)
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='enable verbose output')
    parser.add_argument('--debug', action='store_true',
                        help='enable debugging output')
    parser.add_argument('--token', help='use this token')
    parser.add_argument('--token-file', help='use token from file')
    subparsers = parser.add_subparsers(title='subcommands',
                                       dest='subparser_name',
                                       description='valid subcommands',
                                       help='additional help')

    create_parser = subparsers.add_parser('create', help='Create new build')
    create_parser.add_argument('manager_url', help='remote repo manager url')
    create_parser.add_argument('repo', help='repo name')
    create_parser.set_defaults(func=create_command)

    push_parser = subparsers.add_parser('push', help='Push to repo manager')
    push_parser.add_argument('build_url', help='remote build url')
    push_parser.add_argument('repo_path', help='local repository')
    push_parser.add_argument('branches', nargs='*', help='branches to push')
    push_parser.add_argument('--commit', action='store_true',
                             help='commit build after pushing')
    push_parser.add_argument('--publish', action='store_true',
                             help='publish build after commiting')
    push_parser.add_argument('--extra-id', action='append', help='add extra collection-id')
    push_parser.add_argument('--wait', action='store_true',
                             help='wait for commit/publish to finish')
    push_parser.add_argument('--minimal-token', action='store_true',
                             help='Create minimal token for the upload')
    push_parser.set_defaults(func=push_command)

    commit_parser = subparsers.add_parser('commit', help='Commit build')
    commit_parser.add_argument('--wait', action='store_true',
                             help='wait for commit to finish')
    commit_parser.add_argument('build_url', help='remote build url')
    commit_parser.set_defaults(func=commit_command)

    publish_parser = subparsers.add_parser('publish', help='Publish build')
    publish_parser.add_argument('--wait', action='store_true',
                             help='wait for publish to finish')
    publish_parser.add_argument('build_url', help='remote build url')
    publish_parser.set_defaults(func=publish_command)

    purge_parser = subparsers.add_parser('purge', help='Purge build')
    purge_parser.add_argument('build_url', help='remote build url')
    purge_parser.set_defaults(func=purge_command)

    create_token_parser = subparsers.add_parser('create-token', help='Create subset token')
    create_token_parser.add_argument('manager_url', help='remote repo manager url')
    create_token_parser.add_argument('name', help='Name')
    create_token_parser.add_argument('subject', help='Subject')
    create_token_parser.add_argument('scope', nargs='*', help='Scope')
    create_token_parser.add_argument('--duration', help='Duration until expires, in seconds',
                                     default=60*60*24, # Default duration is one day
                                     type=int)
    create_token_parser.set_defaults(func=create_token_command)

    args = parser.parse_args()

    loglevel = logging.WARNING
    if args.verbose:
        loglevel = logging.INFO
    if args.debug:
        loglevel = logging.DEBUG

    logging.basicConfig(format='%(module)s: %(levelname)s: %(message)s',
                        level=loglevel, stream=sys.stderr)

    if not args.subparser_name:
        print("No subcommand specified, see --help for usage")
        exit(1)

    if not args.token:
        if args.token_file:
            file = open(args.token_file, 'rb')
            args.token = file.read().splitlines()[0].decode("utf-8").strip()
        elif "REPO_TOKEN" in os.environ:
            args.token = os.environ["REPO_TOKEN"]
        else:
            print("No token available, pass with --token, --token-file or $REPO_TOKEN")
            exit(1)


    res = 1
    try:
        res = args.func(args)
    except SystemExit:
        raise # Pass on regular exit callse
    except:
        print("\n\nUnexpected error in %s:" % (args.subparser_name))
        traceback.print_exc()
    exit(res)
